#summary Steps for getting going with dpHibernate

= Introduction =

Add your content here.

== Client entity classes ==
Client classes are required to either subclass [http://code.google.com/p/dphibernate/source/browse/branches/2.0/flexLibrary/flex-src/org/dphibernate/core/HibernateBean.as HibernateBean] or implement [http://code.google.com/p/dphibernate/source/browse/branches/2.0/flexLibrary/flex-src/org/dphibernate/core/IHibernateProxy.as IHibernateProxy].  A sample implementation of IHibernate proxy can be found [http://code.google.com/p/dphibernate/source/browse/trunk/samples/lazyLoadingWithSpring/flex/src/com/mangofactory/pepper/model/BaseEntity.as here].

== Server entity classes ==
Similarly, your server-side Java classes must either subclass [http://code.google.com/p/dphibernate/source/browse/branches/2.0/server-adapter/src/org/dphibernate/core/HibernateProxy.java HibernateProxy] or implement [http://code.google.com/p/dphibernate/source/browse/branches/2.0/server-adapter/src/org/dphibernate/core/IHibernateProxy.java IHibernateProxy].

A sample implementation of IHibernateProxy can be found [http://code.google.com/p/dphibernate/source/browse/trunk/samples/lazyLoadingWithSpring/java/src/com/mangofactory/pepper/model/BaseEntity.java here].

=== IHibernateProxy.java implementation ===
If implementing IHibernateProxy yourself, you must make sure that `getProxyKey()` returns your entities primary key.  Note - composite keys are not supported.

== Server side services ==
dpHibernate provides various server side configurations.  Depending on which features you wish to activate, you need to expose different services

|| *Feature* || *Required Service Interface* || *Shipped Default* ||
||Lazy loading||IProxyLoadService||[http://code.google.com/p/dphibernate/source/browse/branches/2.0/server-adapter/src/org/dphibernate/services/ProxyLoadService.java ProxyLoadService]||
||Batched lazy loading||[http://code.google.com/p/dphibernate/source/browse/branches/2.0/server-adapter/src/org/dphibernate/services/IProxyBatchLoader.java IProxyBatchLoader]||[http://code.google.com/p/dphibernate/source/browse/branches/2.0/server-adapter/src/org/dphibernate/services/ProxyBatchLoader.java ProxyBatchLoader]||
||Lazy loading + Batched Loading (_recommended minimum_)||ILazyLoadService + IProxyBatchLoader||[http://code.google.com/p/dphibernate/source/browse/branches/2.0/server-adapter/src/org/dphibernate/services/LazyLoadService.java LazyLoadService]||
||Update / Delete entities||[http://code.google.com/p/dphibernate/source/browse/branches/2.0/server-adapter/src/org/dphibernate/services/IProxyUpdateService.java IProxyUpdateService]||[http://code.google.com/p/dphibernate/source/browse/branches/2.0/server-adapter/src/org/dphibernate/services/ProxyUpdaterService.java ProxyUpdaterService]||
||All the above (_recommended configuration_)|| ||[http://code.google.com/p/dphibernate/source/browse/branches/2.0/server-adapter/src/org/dphibernate/services/DataAccessService.java DataAccessService]||

 * Note - Spring based versions of the default services are also provided, if your configuration uses Spring.  Services are provided both for [http://code.google.com/p/dphibernate/source/browse/branches/2.0/#2.0%2Fspring-extensions-2.5.6%2Fsrc%2Forg%2Fdphibernate%2Fservices Spring 2.5.6] and [http://code.google.com/p/dphibernate/source/browse/branches/2.0/#2.0%2Fspring-extensions-3.0%2Fsrc%2Forg%2Fdphibernate%2Fservices Spring 3.x]

A typical server configuration for lazy loading only can be found [http://code.google.com/p/dphibernate/source/browse/#svn%2Ftrunk%2Fsamples%2FlazyLoadingWithSpring here], or with both lazy loading and entity persistence [http://code.google.com/p/lazyoverflow/ here].

== Server configuration ==
Once your services extend / implement the appropraite interfaces, you need to configure them.

The spring configuration is currently somewhat verbose.  This is an issue currently being investigated.

A fully commented 
An example spring configuration is shown here:

{{{
        <bean id="dpHibernateRemotingAdapter"
                class="org.springframework.flex.core.ManageableComponentFactoryBean">
                <constructor-arg value="org.dphibernate.adapters.RemotingAdapter" />
                <property name="properties">
                        <value>
                                {"dpHibernate" :
                                {
                                "serializerFactory" : "org.dphibernate.serialization.SpringContextSerializerFactory"
                                }
                                }
        </value>
                </property>
        </bean>
        <!--
                Provides a basic service for lazy loading operations through
                dpHibernate. It's also exported as a remoting destination, which makes
                it accessible to flex clients
        -->
        <bean id="dataAccessService" class="org.dphibernate.services.SpringLazyLoadService"
                autowire="constructor">
                <flex:remoting-destination />
        </bean>
        <!--
                The main serializer. Converts outbound POJO's to ASObjects with
                dpHibernate proxies for lazy loading. Required
        -->
        <bean id="dpHibernateSerializer" class="org.dphibernate.serialization.HibernateSerializer"
                scope="prototype">
                <property name="pageSize" value="10" />
        </bean>
        <bean id="dpHibernateDeserializer" class="org.dphibernate.serialization.HibernateDeserializer"
                scope="prototype" />

}}}

See also [http://code.google.com/p/dphibernate/source/browse/trunk/samples/lazyLoadingWithSpring/WebContent/WEB-INF/flexContext.xml this example]

This is the minimum configuration.  For a more complete example, see [http://code.google.com/p/lazyoverflow/source/browse/trunk/WebContent/WEB-INF/dpHibernateContext.xml here].